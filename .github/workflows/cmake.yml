name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "Unix Makefiles" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_FLAGS="-O2 -pie -s" -DCMAKE_C_FLAGS="-O2 -pie -s"

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
      - name: Generate Artifacts
        run: cmake --install ${{github.workspace}}/build
      
      - name: Upload a Server Artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          # Artifact name
          name: "Server Executable Linux"
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{github.workspace}}/server/bin/
          
      - name: Upload a Client Artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          # Artifact name
          name: "Client Executable Linux"
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{github.workspace}}/client/bin/

